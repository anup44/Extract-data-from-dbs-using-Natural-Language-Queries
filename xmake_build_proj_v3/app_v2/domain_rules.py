import datetime
from query_processor.parsing import Rule
from query_processor.utility_functions import KeyDefaultDict
from query_processor.utility_functions import sems_0, sems_1, sems_2, sems_3, merge_dicts, convert_ner_date

""" All the rules needed for extracting entities and intent """
rules_1 = [
    Rule('$ROOT', '?$Optionals $Query', sems_1),
    Rule('$Query', '$SubQuery ?$Query', lambda sems: merge_dicts(sems[0], sems[1])),
    # Rule('$SubQuery', '?$Optionals $QueryElements ?$Optionals', sems_1),
    Rule('$SubQuery', '$QueryElement ?$Optionals', sems_0),
    # Rule('$QueryElements', '$QueryElement ?$QueryElements', lambda sems: merge_dicts(sems[0], sems[1])),
    Rule('$QueryElement', '$ENTITY', sems_0),
    Rule('$QueryElement', '$ARGUMENT', sems_0),
    Rule('$ENTITY', '$AGENCY', lambda sems: {'Agency': sems[0]}),
    Rule('$ENTITY', '$BENEFIT', lambda sems: {'PaymentGroup': sems[0]}),
    Rule('$ENTITY', '$NAME', lambda sems: {'NAME': sems[0]}),
    # Rule('$ENTITY', '$NAMEPOS', lambda sems: {'NAMEPOS': sems[0]}),
    Rule('$ENTITY', '$MONEY', lambda sems: {'MONEY': sems[0]}),
    Rule('$ENTITY', '$Bank_Account', lambda sems: {'BankAccountNumber': sems[0]}),
    Rule('$ENTITY', '$CRNNumber', lambda sems: {'BPIdentificationNumber': sems[0]}),
    Rule('$ENTITY', '$BSBNumber', lambda sems: {'BSBNumber': sems[0]}),
    Rule('$ENTITY', '$External_ID', lambda sems: {'ExternalKey': sems[0]}),
    Rule('$ENTITY', '$Postcode', lambda sems: {'POSTCODE': sems[0]}),
    Rule('$ENTITY', '$LOCKREASON', lambda sems: {'ReasonText': sems[0]}),
    Rule('$ENTITY', '$IDFull', lambda sems: {'BPIdentificationNumber': sems[0]}),
    # Rule('$ENTITY','$IDType',lambda sems:{'IDType':sems[0]}),
    Rule('$ARGUMENT', '$TYPE', lambda sems: {'TYPE': sems[0]}),
    Rule('$ARGUMENT', '$DATE', lambda sems: {'DATE': sems[0]}),
    Rule('$ARGUMENT', '$POST_OP', lambda sems: {'Math_Operator': sems[0]}),
    Rule('$TYPE', '$FIDQ', 'Payment_Info'),
    Rule('$TYPE', '$LOCKVAL', 'Lock_Validity'),
    Rule('$TYPE', '$PAYMENTQ', 'Payment_Amount'),
    Rule('$TYPE', '$PAYDETAILSQ', 'Payment_Details'),
    Rule('$TYPE', '$PAYIDQ', 'Pay_ID'),
    Rule('$TYPE', '$BANKINFOQ', 'Bank_Info'),
    Rule('$TYPE', '$DEDUCTION', 'Payment_Deduction'),
    Rule('$NAME', '$NAMEPOS', sems_0),
    Rule('$FIDQ', '$RECEIVE ?$Token ?$PAYMENTQ'),
    Rule('$PAYDETAILSQ', '$DETAIL ?$Token ?$Token ?$Token $PAYMENTQ'),
    Rule('$PAYDETAILSQ', '$PAYMENTQ ?$Token ?$Token $DETAIL'),
    Rule('$PAYIDQ', '$PAYID ?$Token ?$Token $DETAIL'),
    Rule('$PAYIDQ', '$DETAIL ?$Token ?$Token $PAYID'),
    Rule('$BANKINFOQ', '$DETAIL ?$Token ?$Token $BANK'),
    Rule('$BANKINFOQ', '$BANK ?$Token ?$Token $DETAIL'),
    Rule('$POST_OP', '$SUM', 'SUM'),
    Rule('$POST_OP', '$AVG', 'AVG'),
    Rule('$POST_OP', '$MIN', 'MIN'),
    Rule('$POST_OP', '$MAX', 'MAX'),
    # Rule('$Optionals', '$Token ?$Optionals'),
    # Rule('$Optional', '$Token'),
    Rule('$DATE', '$NERDATE', lambda sems: convert_ner_date(sems)),
    Rule('$DATE', '$TODAY', datetime.date.today().strftime('%d-%m-%Y')),
    Rule('$DATE', '$YESTERDAY', (datetime.date.today() - datetime.timedelta(days=1)).strftime('%d-%m-%Y')),
    Rule('$DATE', '$TOMORROW', (datetime.date.today() + datetime.timedelta(days=1)).strftime('%d-%m-%Y')),
    Rule('$MONEY','$Number $CURR', lambda sems: str(sems[0]) + ' ' + sems[1] if sems[1] else str(sems[0])),
    Rule('$Bank_Account', '$BANK_ACC ?$Token ?$Token $Number', sems_3),
    Rule('$CRNNumber', '$CRN ?$Token ?$Token $AlphaNum', sems_3),
    Rule('$IDFull', '$IDType ?$Token ?$Token $AlphaNum', sems_3),
    Rule('$BSBNumber', '$BSB ?$Token ?$Token $AlphaNum', sems_3),
    Rule('$External_ID', '$EXTID ?$Token ?$Token $AlphaNum', sems_3),
    Rule('$Postcode', '$POSTC ?$Token ?$Token $Number', sems_3),
    # Rule('$Tokens_AlphaNum', '?$Token ?$Token $AlphaNum', sems_2),
    # Rule('$Tokens_Number', '?$Token ?$Token $Number', sems_2),

    Rule('$RECEIVE', 'receive'),
    Rule('$RECEIVE', 'received'),
    Rule('$RECEIVE', 'receiving'),
    Rule('$RECEIVE', 'was to get'),
    Rule('$RECEIVE', 'supposed to get'),
    Rule('$RECEIVE', 'did not get'),
    Rule('$RECEIVE', 'didnt get'),
    Rule('$LOCKVAL', 'lock'),
    Rule('$LOCKVAL', 'locking'),
    Rule('$LOCKVAL', 'locking status'),
    Rule('$LOCKVAL', 'lock status'),
    Rule('$LOCKVAL', 'locked'),
    Rule('$LOCKVAL', 'blocked'),
    Rule('$LOCKVAL', 'block status'),
    Rule('$LOCKVAL', 'blocking status'),
    Rule('$LOCKVAL', 'blocking'),
    Rule('$LOCKVAL', 'restricted'),
    Rule('$LOCKVAL', 'stopped'),
    Rule('$LOCKVAL', 'active'),
    Rule('$PAYMENTQ', 'payments'),
    Rule('$PAYMENTQ', 'Payments'),
    Rule('$PAYMENTQ', 'payment'),
    Rule('$PAYMENTQ', 'transactions'),
    Rule('$PAYMENTQ', 'transaction'),
    Rule('$DEDUCTION', 'deduction'),
    Rule('$DEDUCTION', 'deducted'),    
    Rule('$DEDUCTION', 'deduct'),
    Rule('$DEDUCTION', 'deductions'),
    Rule('$BANK', 'bank'),
    Rule('$BANK', 'Bank'),
    Rule('$BANK', 'bank account'),
    Rule('$BANK', 'Bank Account'),
    Rule('$BANK', 'Bank account'),
    Rule('$BANK', 'bank Account'),
    Rule('$BANK', 'bank Acc'),
    Rule('$BANK', 'Bank Acc'),
    Rule('$BANK', 'Bank acc'),
    Rule('$BANK', 'bank acc'),
    Rule('$BANK_ACC', 'bank account'),
    Rule('$BANK_ACC', 'Bank Account'),
    Rule('$BANK_ACC', 'Bank account'),
    Rule('$BANK_ACC', 'bank Acc'),
    Rule('$BANK_ACC', 'Bank Acc'),
    Rule('$BANK_ACC', 'Bank acc'),
    Rule('$BANK_ACC', 'bank acc'),
    Rule('$BANK_ACC', 'account'),
    Rule('$BANK_ACC', 'Account'),
    Rule('$BANK_ACC', 'Acc'),
    Rule('$BANK_ACC', 'acc'),
    # Rule('$CRN', 'CRN'),
    # Rule('$CRN', 'crn'),
    Rule('$BSB', 'BSB'),
    Rule('$BSB', 'bsb'),
    Rule('$EXTID', 'external ID'),
    Rule('$EXTID', 'external Id'),
    Rule('$EXTID', 'external id'),
    Rule('$EXTID', 'externalid'),
    Rule('$EXTID', 'externalId'),
    Rule('$EXTID', 'externalID'),
    Rule('$EXTID', 'External ID'),
    Rule('$EXTID', 'External Id'),
    Rule('$EXTID', 'External id'),
    Rule('$EXTID', 'Externalid'),
    Rule('$EXTID', 'ExternalId'),
    Rule('$EXTID', 'ExternalID'),
    Rule('$EXTID', 'External key'),
    Rule('$EXTID', 'external Key'),
    Rule('$EXTID', 'external key'),
    Rule('$EXTID', 'externalkey'),
    Rule('$EXTID', 'externalKey'),
    Rule('$EXTID', 'External Key'),
    Rule('$EXTID', 'External key'),
    Rule('$EXTID', 'Externalkey'),
    Rule('$EXTID', 'External'),
    Rule('$EXTID', 'external'),
    Rule('$PAYID', 'payid'),
    Rule('$PAYID', 'Payid'),
    Rule('$PAYID', 'Pay id'),
    Rule('$PAYID', 'pay id'),
    Rule('$PAYID', 'PayID'),
    Rule('$PAYID', 'Pay ID'),
    Rule('$PAYID', 'pay ID'),
    Rule('$PAYID', 'payID'),
    Rule('$PAYID', 'pay Id'),
    Rule('$PAYID', 'payId'),
    Rule('$PAYID', 'PayId'),
    Rule('$POSTC', 'postcode'),
    Rule('$POSTC', 'Postcode'),
    Rule('$POSTC', 'post code'),
    Rule('$POSTC', 'postal code'),
    Rule('$POSTC', 'postalcode'),
    Rule('$POSTC', 'Post code'),
    Rule('$POSTC', 'Postal code'),
    Rule('$POSTC', 'Post Code'),
    Rule('$POSTC', 'Postal Code'),
    Rule('$POSTC', 'post Code'),
    Rule('$POSTC', 'postal Code'),
    Rule('$POSTC', 'Post'),
    Rule('$POSTC', 'post'),
    Rule('$POSTC', 'postal'),
    Rule('$POSTC', 'postal'),
    Rule('$TODAY', 'today'),
    Rule('$TOMORROW', 'tomorrow'),
    Rule('$YESTERDAY', 'yesterday'),
    Rule('$DETAIL', 'details'),
    Rule('$DETAIL', 'Detail'),
    Rule('$DETAIL', 'Details'),
    Rule('$DETAIL', 'detail'),
    Rule('$DETAIL', 'info'),
    Rule('$DETAIL', 'Info'),
    Rule('$DETAIL', 'information'),
    Rule('$DETAIL', 'information'),
    Rule('$DETAIL', 'data'),
    Rule('$DETAIL', 'Data'),
    Rule('$SUM', 'total'),
    Rule('$SUM', 'sum'),
    Rule('$AVG', 'avg'),
    Rule('$AVG', 'average'),
    Rule('$MIN', 'min'),
    Rule('$MIN', 'minimum'),
    Rule('$MAX', 'max'),
    Rule('$MAX', 'maximum'),
    # Rule('$CURR', 'AUD', 'AUD')
]

""" Weights defined for selecting relevant parses """
weights = KeyDefaultDict(
    lambda feature: -1.0
        if feature[0] == '$Token' or feature[0] == '$Optionals'
        else 0.0)

weights[('$NAME', ('$NAMEPOS',))] = -0.1

weights['$ENTITY', ('$NAME',)] = 1.0
weights['$ENTITY', ('$MONEY',)] = 1.0
weights['$ENTITY', ('$Bank_Account',)] = 1.0
weights['$ENTITY', ('$CRNNumber',)] = 1.0
weights['$ENTITY', ('$IDFull',)] = 1.0
weights['$ENTITY', ('$BSBNumber',)] = 1.0
weights['$ENTITY', ('$External_ID',)] = 1.0
weights['$ENTITY', ('$Postcode',)] = 1.0
weights['$ARGUMENT', ('$TYPE',)] = 1.0
weights['$ARGUMENT', ('$DATE',)] = 1.0
weights['$ARGUMENT', ('$POST_OP',)] = 1.0

weights['$ENTITY', ('$AGENCY',)] = -0.5
weights['$ENTITY', ('$BENEFIT',)] = -0.5
weights['$ENTITY', ('$LOCKREASON',)] = -0.5

zero_value_categories = ['$Optionals', '$Token', '$Optional']